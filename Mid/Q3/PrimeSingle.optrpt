Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] PrimeSingle.cpp(121,1)
  -> INLINE: (125,5) GetCommandLineArguments(int, char **, int &, int &)
    -> INLINE: (59,19) atoi(const char *) noexcept(true)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: (60,19) atoi(const char *) noexcept(true)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (131,5) FindPrimes(int, int)
    -> INLINE: (113,13) TestForPrime(int)
    -> INLINE: (116,9) ShowProgress(int, int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at PrimeSingle.cpp(111,5) inlined into PrimeSingle.cpp(131,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at PrimeSingle.cpp(100,5) inlined into PrimeSingle.cpp(131,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at PrimeSingle.cpp(100,5) inlined into PrimeSingle.cpp(131,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

PrimeSingle.cpp(121,1):remark #34051: REGISTER ALLOCATION : [main] PrimeSingle.cpp:121

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm2 zmm8-zmm14]
        
    Routine temporaries
        Total         :     116
            Global    :      45
            Local     :      71
        Regenerable   :      27
        Spilled       :      14
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       2 [2.97e-01 ~ 0.3%]
            Writes    :       2 [2.97e-01 ~ 0.3%]
        Spills        :      72 bytes*
            Reads     :      12 [2.54e+00 ~ 2.5%]
            Writes    :       9 [3.88e+00 ~ 3.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: GetCommandLineArguments(int, char **, int &, int &)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (GetCommandLineArguments(int, char **, int &, int &)) [3] PrimeSingle.cpp(56,1)
  -> INLINE: (59,19) atoi(const char *) noexcept(true)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (60,19) atoi(const char *) noexcept(true)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

PrimeSingle.cpp(56,1):remark #34051: REGISTER ALLOCATION : [_Z23GetCommandLineArgumentsiPPcRiS1_] PrimeSingle.cpp:56

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r12-r14]
        
    Routine temporaries
        Total         :      36
            Global    :      15
            Local     :      21
        Regenerable   :      10
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ShowProgress(int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ShowProgress(int, int)) [4] PrimeSingle.cpp(83,1)


    Report from: Code generation optimizations [cg]

PrimeSingle.cpp(83,1):remark #34051: REGISTER ALLOCATION : [_Z12ShowProgressii] PrimeSingle.cpp:83

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r9 zmm0-zmm1]
        
    Routine temporaries
        Total         :      30
            Global    :       7
            Local     :      23
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: TestForPrime(int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (TestForPrime(int)) [5] PrimeSingle.cpp(96,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at PrimeSingle.cpp(100,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at PrimeSingle.cpp(100,5)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

PrimeSingle.cpp(96,1):remark #34051: REGISTER ALLOCATION : [_Z12TestForPrimei] PrimeSingle.cpp:96

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r9 r13-r15 zmm0-zmm1 zmm8-zmm11]
        
    Routine temporaries
        Total         :      38
            Global    :      19
            Local     :      19
        Regenerable   :       3
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :      10 [1.73e+00 ~ 1.7%]
            Writes    :       5 [4.14e+00 ~ 4.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FindPrimes(int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FindPrimes(int, int)) [6] PrimeSingle.cpp(107,1)
  -> INLINE: (113,13) TestForPrime(int)
  -> INLINE: (116,9) ShowProgress(int, int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at PrimeSingle.cpp(111,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at PrimeSingle.cpp(100,5) inlined into PrimeSingle.cpp(113,13)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at PrimeSingle.cpp(100,5) inlined into PrimeSingle.cpp(113,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

PrimeSingle.cpp(107,1):remark #34051: REGISTER ALLOCATION : [_Z10FindPrimesii] PrimeSingle.cpp:107

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8 r12-r15 zmm0-zmm2 zmm8-zmm14]
        
    Routine temporaries
        Total         :      70
            Global    :      32
            Local     :      38
        Regenerable   :      11
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      88 bytes*
            Reads     :      13 [2.91e+00 ~ 2.9%]
            Writes    :      11 [3.94e+00 ~ 3.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
